<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The 10th Art]]></title>
  <link href="http://www.krynn.cn/atom.xml" rel="self"/>
  <link href="http://www.krynn.cn/"/>
  <updated>2018-07-05T23:30:07+08:00</updated>
  <id>http://www.krynn.cn/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[Mac常用命令]]></title>
    <link href="http://www.krynn.cn/15307181630698.html"/>
    <updated>2018-07-04T23:29:23+08:00</updated>
    <id>http://www.krynn.cn/15307181630698.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">查找端口占用</h2>

<pre><code>$ lsof -i:8080 //查询该端口8080的进程id
$ kill 12345   //杀掉该id进程
</code></pre>

<h2 id="toc_1">查看进程状态</h2>

<pre><code>$ ps -ef | grep eureka
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drools简介]]></title>
    <link href="http://www.krynn.cn/15301972643935.html"/>
    <updated>2018-06-28T22:47:44+08:00</updated>
    <id>http://www.krynn.cn/15301972643935.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Drools组成部分</h2>

<ul>
<li>Drools规则文件，drl</li>
<li>解释执行规则，API

<ul>
<li>规则编译</li>
<li>规则收集</li>
<li>规则执行</li>
</ul></li>
</ul>

<h2 id="toc_1">主要概念</h2>

<h3 id="toc_2">kmodule.xml</h3>

<ul>
<li>文件存储路径如果不指定，KieModuleModelImpl代码里默认会常量固定的为META-INF目录</li>
<li>kmodule中可以定义多个kbase，分别对应不同drl规则文件</li>
<li>kbase需要唯一命名，名称字符内容不限</li>
<li>package为drl文件所在resource目录下的路径，drl文件中的package与实际路径不一定相同，默认情况下会扫描resources目录下所有规则文件</li>
<li>kbase用default属性来定义默认kbase，默认kbase不用名称也可以查找，只能定义一个default，不建议使用，还是用名称为主</li>
<li>kbase下面可以有多个ksession，名称必填，且唯一</li>
</ul>

<h3 id="toc_3">Kie</h3>

<ul>
<li>KIE=knowledge is everything</li>
<li>KIE包括Drools、OptaPlanner、UberFire、jBPM四个项目，KIE本身是四个项目公共的一些接口定义，具体实现在各项目中</li>
<li>KIE的生命周期：

<ul>
<li>编写：编写规则文件，如：drl、bpmn2、决策表、实体类等</li>
<li>构建：变成一个可发布部署的文件，通常是jar</li>
<li>测试、部署</li>
<li>使用：通过KieContainer对jar进行解析创建KieSession</li>
<li>执行：KieSession的API与Drools引擎进行交互，执行规则</li>
<li>交互：根据业务需要提供命令行或者UI交互</li>
<li>管理：管理KieSession或KieContainer</li>
</ul></li>
</ul>

<h3 id="toc_4">FACT对象</h3>

<ul>
<li>是一个特殊的JavaBean，有getter/setter方法</li>
<li>放置于工作内存中</li>
<li>是应用数据和规则间的桥梁</li>
<li>按引用传递</li>
<li>facthandler可用于处理fact对象</li>
</ul>

<h3 id="toc_5">主要API</h3>

<ul>
<li>KieService：工厂方法，用来获取各种对象来完成规则构建、管理和执行，如：KieContainer，用来访问KBase和KSession；KieRepository，用来管理KieModule</li>
<li>KieContainer：KieBase容器，提供获取KieBase的方法，内部通过KieBase来创建KieSession</li>
<li>KieBase：知识仓库，包括了规则、流程和方法。不包含运行时数据，与运行时数据交互，要使用KieSession</li>
<li>KieSession：是一个会话，用来跟Drools引擎交互</li>
<li>KieRepository：单例对象，存放由kmodule.xml文件定义的KieModule的仓库</li>
<li>KieProject：KieContainer通过KieProject来初始化、构造KieModule，并将KieModule存放到KieRepository中，然后KieContainer可以通过KieProject来查询KieModule定义的信息，并根据这些信息构造KieBase和KieSession</li>
<li>ClasspathKieProject：实现了KieProject接口，提供了基于类路径的META-INF/kmodule.xml文件构造KieModule的能力，是基于Maven构造Drools组件的基本方法</li>
</ul>

<h3 id="toc_6">session</h3>

<ul>
<li>有状态session。默认有状态session。没有调用dispose方法前，维持会议状态，可以进行多次操作</li>
<li>无状态session。不用调用dispost进行Session的关闭。它不用fireallrules方法。只用excute方法进行执行。每次交互不保持状态。本质上是对有状态session的封装，每次调用后，方法内都会dispose。用在单次操作场景，如校验</li>
</ul>

<h3 id="toc_7">规则文件</h3>

<ul>
<li>.drl文件，文本文件，存放用户自定义函数、数据对象及自定义查询等</li>
<li>Drools编译器对此文件进行编译</li>
<li>package：必须放在第一行，不要求跟目录层级一致</li>
<li>import：跟java语法一样，区别在可以引入静态方法import static xxxx或import function xxxx</li>
<li>global：定义全局的服务，如：global xxx.xxx.Xxx xxx，后面就可以直接使用xxx</li>
<li>function：定义方法，function String xxx() {}，后续可以直接使用该方法</li>
<li>queries：类似function</li>
<li>rules：定义具体的规则。包括：agenda-group（属性）,when（条件，为true时执行后续，每个条件是and关系）, then（执行）, end等。规则也可以继承</li>
<li>idea自带drools插件JBoss Drools Support</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Cloud学习笔记-1]]></title>
    <link href="http://www.krynn.cn/15301075535592.html"/>
    <updated>2018-06-27T21:52:33+08:00</updated>
    <id>http://www.krynn.cn/15301075535592.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">微服务是什么</h2>

<ul>
<li>James Lewis &amp; Martin Fowler 2014年3月25日写的《Microservices》</li>
<li><a href="http://martinfowler.com/articles/microservices.html">http://martinfowler.com/articles/microservices.html</a></li>
<li>微服务是一种架构风格，没有强制性，没有标准答案，如同Restful</li>
<li>微服务特点：

<ul>
<li>一系列微小的服务组成</li>
<li>一个微服务一个进程</li>
<li>每个服务提供独立的业务功能</li>
<li>独立部署</li>
<li>分布式</li>
<li>无状态</li>
<li>被管理</li>
<li>自动运维</li>
<li>API/Restful</li>
</ul></li>
</ul>

<h2 id="toc_1">单体架构优点和缺点</h2>

<ul>
<li>优点：容易测试和部署</li>
<li>缺点：代码维护困难，发布依赖多，构建时间长，稳定性易受单个模块影响，扩展性不够，开发效率低</li>
<li>其实微服务跟单体架构比没什么意思，毕竟不是一个时代的模式。分布式跟微服务才比较困扰</li>
</ul>

<h2 id="toc_2">分布式架构的优点和缺点</h2>

<ul>
<li>优点：分布式，多个自治的处理单元，不共享主内存，通过网络发送消息合作</li>
<li>缺点：没有牵引微小化，部分模块仍然较大，存在单体架构的各种缺点</li>
</ul>

<h2 id="toc_3">微服务架构的主要组件</h2>

<ul>
<li>服务注册发现，Zookeeper，Eureka</li>
<li>服务网关，连接内外，提供服务路由，屏蔽后台细节，还会提供限流和容错，监控和日志也可以在这做，用户认证、授权，反爬虫</li>
<li>前端服务，边缘服务，对后端的服务进行聚合和裁剪

<ul>
<li>聚合：多个API逻辑进行聚合，减少后端请求数</li>
<li>裁剪：根据用户环境，返回不一样的服务内容，比如：手机端跟PC端返回不一样的内容</li>
</ul></li>
<li>后端服务，提供业务功能</li>
</ul>

<h2 id="toc_4">Spring Cloud是什么</h2>

<ul>
<li>是一个开发工具集，包括了多个子项目</li>
<li>Spring Boot提供开发便利性</li>
<li>对Netflix开源组件进行封装</li>
<li>降低了分布式开发门槛</li>
</ul>

<h2 id="toc_5">Eureka</h2>

<ul>
<li><p>Eureka Server 注册中心</p>

<ul>
<li>EurekaApplication.java需要加入注解<code>@EnableEurekaServer</code></li>
<li><p>配置application.yml</p>

<pre><code>eureka:
    client:
        service-url:
        defaultZone: http://localhost:8761/eureka
        register-with-eureka: false //关闭自己做为客户端注册
    server:
        enable-self-preservation: false //关闭客户端检测保护
spring:
    application:
        name: eureka
server:
    port: 8761
</code></pre></li>
<li><p>将eureka放入后台运行</p>

<pre><code>//在命令行打包
$ mvn clean package
//放入后台执行
$ nohup java -jar target/eureka-0.0.1-SNAPSHOT.jar &gt; /dev/null 2&gt;&amp;1 &amp;
</code></pre></li>
</ul></li>
</ul>

<ul>
<li><p>Eureka Client 进行服务注册</p>

<ul>
<li>引入依赖，靠idea不靠谱，2.0.0正式版以上，会漏了最后一个，让我调测半天</li>
</ul>

<pre><code>    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;
</code></pre>

<ul>
<li>application.yml里配上注册中心地址</li>
</ul>

<pre><code>eureka:
    client:
        serviceUrl:
        defaultZone: http://127.0.0.1:8761/eureka/
  instance:
    hostname: clientName //设置注册记录里的Status列里的链接地址
spring:
    application:
        name: customer-service
</code></pre>

<ul>
<li>在启动的主类加<code>@EnableDiscoveryClient</code>注解</li>
</ul></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[蓝鲸智云-CMDB源码解读1-架构篇]]></title>
    <link href="http://www.krynn.cn/15292476343143.html"/>
    <updated>2018-06-17T23:00:34+08:00</updated>
    <id>http://www.krynn.cn/15292476343143.html</id>
    <content type="html"><![CDATA[
<p>蓝鲸是腾讯游戏运维部门开发出来的一个IT运维平台，主要围绕应用运维工作，提供一系列的工具。具体包括：作业平台、集成平台、管控平台、数据平台、配置平台等。这次要分析的是里面最基础的配置平台，它主要负责运维环境里所有CI、以及CI的关系管理，并为其它平台提供统一的资源视图。</p>

<p>蓝鲸配置平台，即CMDB，是蓝鲸系列产品中第一个开源产品。当前版本是3.0，基于golang语言全新重构，完全基于微服务架构风格开发，小小好奇心驱动去看看。</p>

<ol>
<li><p>首先看一眼蓝鲸CMDB的官方逻辑架构图<br/>
<img src="http://oukyvrh16.bkt.clouddn.com/15292479035199.png" alt=""/></p></li>
</ol>

<ul>
<li>典型的前后台分层，业务逻辑与原子服务解耦的分层设计。</li>
<li>最上面展现层，基于gin和vue.js实现web服务。</li>
<li>前后台中间设置api层，目前主流的前后台交互通过专用apiserver进行业务逻辑的包装和转发方式，k8s，promuthues等都是这样。前台只负责页面渲染、数据呈现和人机交互。后台服务层负责业务逻辑处理和数据持久化。</li>
<li>然后是服务层，里面又分成业务场景层和资源管理层。

<ul>
<li>顾名思义，业务场景层是与资源管理相关场景所需的功能域，如拓扑呈现。拓扑呈现需要根据资源模型和关系定义，维护CI间的关系路径，这里面包含了大量的业务逻辑，如依赖关系校验、承载规则等等，跟业务强相关的东西。随着业务的深入，变化会比较大，属于扩展性要求高的一层，剥离出来单独分层比较好。目前已提取的场景包括：管理、事件、进程、主机、拓扑、数据采集等几个服务；</li>
<li>下面是资源管理层，这层的功能相对比较稳定，属于原子性的功能和模型，受业务影响小，以稳定性、性能、可靠性等为主要考量。主要把管理对象抽象成主机、进程和通用对象三类，这种抽象方法IT针对性太强，做一些行业应用需要自己扩展，另外还有一个审计服务。</li>
</ul></li>
<li><p>最下层为存储层，主要是MongoDB主数据库、Redis缓存，以及用ZooKeeper来做服务注册发现以及服务配置管理。</p></li>
</ul>

<ol>
<li>再看看实现架构/代码工程
下次再写</li>
</ol>

]]></content>
  </entry>
  
</feed>
