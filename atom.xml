<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The 10th Art]]></title>
  <link href="http://www.krynn.cn/atom.xml" rel="self"/>
  <link href="http://www.krynn.cn/"/>
  <updated>2018-07-15T00:08:47+08:00</updated>
  <id>http://www.krynn.cn/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[Spring Cloud学习笔记-5.config配置中心]]></title>
    <link href="http://www.krynn.cn/15315781706116.html"/>
    <updated>2018-07-14T22:22:50+08:00</updated>
    <id>http://www.krynn.cn/15315781706116.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">使用方法</h2>

<p>1.pom.xml引入依赖</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>

<p>2.项目主启动文件增加<code>@EnableDiscoveryClient</code>和<code>@EnableConfigServer</code>注解，完成服务注册和开启config server服务</p>

<p>3.在application.yml指定git配置路径</p>

<pre><code>spring:
  application:
    name: config
  cloud:
    config:
      server:
        git:
          uri: https://gitlab-demo.com/6003575/my-config-repo.git
          username: 6003575
          password: abcd1234
          basedir: /Users/daiqiang/Dev/java/springcloud_sell/config-repo
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
</code></pre>

<ul>
<li>可以通过<code>http://localhost:8082(服务指定端口号)/filename-a.yml</code>文件来检验是否从配置服务器获取到指定配置</li>
<li>文件名有规则，如：/{label}/{name}-{profiles}.yml，label指分支，name为原文件名，profiles为环境，后面为扩展名</li>
<li>本地git仓库路径可以通过<code>basedir</code>参数指定</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5G概要]]></title>
    <link href="http://www.krynn.cn/15311410217445.html"/>
    <updated>2018-07-09T20:57:01+08:00</updated>
    <id>http://www.krynn.cn/15311410217445.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">前4G概述</h2>

<h3 id="toc_1">移动通信的核心技术</h3>

<table>
<thead>
<tr>
<th style="text-align: center">移动通信</th>
<th style="text-align: center">核心技术</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">1G</td>
<td style="text-align: center">FDMA</td>
</tr>
<tr>
<td style="text-align: center">2G</td>
<td style="text-align: center">时分多址（TDMA）和频分多址（FDMA）</td>
</tr>
<tr>
<td style="text-align: center">3G</td>
<td style="text-align: center">码分多址（CDMA）</td>
</tr>
<tr>
<td style="text-align: center">4G</td>
<td style="text-align: center">正交频分复用（OFDM）和多入多出（MIMO）</td>
</tr>
</tbody>
</table>

<h3 id="toc_2">4G面临的挑战</h3>

<ul>
<li><p>运营商面临的挑战</p>

<ul>
<li>OTT应用大量取代电信运营商的业务</li>
<li>OTT应用还大量占用电信网络信令资源，运营商产生“量收剪刀差”</li>
</ul></li>
<li><p>用户需求的挑战</p>

<ul>
<li>用户追求极致体验要求高接入速率、低时延、随时随地无缝连接，如：视频、AR、VR</li>
<li>各种行业和移动通信的融合，特别是物联网行业</li>
</ul></li>
<li><p>技术面临的挑战</p>

<ul>
<li>云计算的广泛使用，未来终端与网络之间将出现大量的控制类信令交互，现有的语音通信模型将不再适用，需要针对小数据包频发消耗信令资源的问题，对无线空口和核心网进行重构</li>
<li>超高清视频、3D和VR等业务需要极高的网络传输速率，如：8K 3D的视频需要100Gbps的传输速率，压缩后也需要1Gbps</li>
<li>网络游戏等交互式应用需要快速响应的低时延</li>
<li>物联网海量设备连接</li>
<li>控制类物联网业务需要低时延，如：车联网、自动控制类对时延要求是1ms，传统视觉应用是10ms，听觉应用是100ms</li>
</ul></li>
</ul>

<h2 id="toc_3">5G的需求和场景</h2>

<h3 id="toc_4">什么是5G</h3>

<ul>
<li>5G不仅是更高速率、更大带宽、更强能力的空口技术，更是面向业务应用和用户体验的智能网络</li>
<li>5G不再由某项业务能力或者某个典型技术特征所定义，它将是一个多业务多技术融合的网络</li>
<li>5G的基本特征

<ul>
<li>高速率：峰值速率大于20Gbps</li>
<li>低时延：从4G的50ms缩减到1ms</li>
<li>海量设备连接：1000亿量级的连接</li>
<li>低功耗：基站更节能，终端更省电</li>
</ul></li>
</ul>

<h3 id="toc_5">5G的主要应用场景</h3>

<ul>
<li>交通运输：有效、安全的自动驾驶</li>
<li>健康护理：远程医疗</li>
<li>富媒体：多用户超高清电话会议、多媒体视频、超保真无损音乐</li>
<li>家居：家居安防</li>
<li>消费电子：远程控制</li>
<li>教育：远程教学虚拟体验</li>
<li>工业控制：如：E///展示远程控制挖掘机，华为展示实时遥控机器人手臂作画</li>
</ul>

<h2 id="toc_6">5G的核心技术</h2>

<ul>
<li>大规模天线阵列：大幅提升系统频谱效率</li>
<li>超密集组网：增加基站部署密度，实现百倍级容量提升</li>
<li>新型多址技术：通过发送信号的叠加传输提升系统接入能力</li>
<li>全频谱接入技术：提高各类频谱资源利用效率</li>
<li>新型网络架构：采用SDN、NFV和云计算等技术实现更灵活、智能、高效和开放的5G新型网络</li>
<li>5G新空口将采用新型多址、多规模天线、新波型（FBMC、SCMA、PDMA、MUSA）、超密集组网和全频谱接入等核心技术，在帧结构、信令流程、双工方式上进行改进，形成面向连续广域覆盖、高热点容量、低时延、高可靠和低功耗大连接等场景的空口技术方案</li>
<li>SDN和NFV成为5G网络的重要特征</li>
<li><p>网络切片：利用虚拟化将网络物理基础设施资源虚拟化为多个相互独立平行的虚拟网络切片。一个网络切片可以视为一个实例化的5G网络，在每个网络切片内，运营商可以进一步对虚拟网络切片进行灵活的分割，按需创建子网络</p>

<ul>
<li><p>多横三纵</p>

<table>
<thead>
<tr>
<th></th>
<th>接入网切片</th>
<th>核心网切片</th>
<th>数据网和服务切片</th>
</tr>
</thead>

<tbody>
<tr>
<td>智能手机网络切片</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>自动驾驶网络切片</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>大规模物联网网络切片</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>……</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table></li>
<li><p>编排和自动化是网络切片的关键</p>

<ul>
<li>具备快速创建新服务的能力</li>
<li>具备应用模板驱动（Template Driven）切片创建环境的能力</li>
<li>具备切片参数多样化的能力，以满足不同的商业用例要求</li>
<li>具备自动化切片部署的能力</li>
<li>具备弹性伸缩能力和还原能力</li>
<li>通过服务质量监控，具备动态优化切片性能的能力</li>
</ul></li>
<li><p>物理域和虚拟域的混合网络编排是NFV转型是否能成功的关键</p></li>
</ul></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Cloud学习笔记-4.Ribbon应用间通信]]></title>
    <link href="http://www.krynn.cn/15309599020091.html"/>
    <updated>2018-07-07T18:38:22+08:00</updated>
    <id>http://www.krynn.cn/15309599020091.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">HTTP VS RPC</h2>

<ul>
<li>Dubbo定位是RPC框架，可以作为Spring Cloud二进制通信方案</li>
<li>Spring Cloud是微服务架构下的一站式解决方案</li>
</ul>

<h2 id="toc_1">客户端负载均衡器：Ribbon</h2>

<ul>
<li>RestTemplate

<ul>
<li>使用Rest方式调用其它服务</li>
</ul></li>
<li>Feign

<ul>
<li>声明式REST客户端</li>
<li>采用接口+注解的方式，即定义一个Interface，然后在上面加上注解</li>
<li>使用时感觉不到是在调用REST，像是在用本地接口，底层还是使用了Ribbon的机制</li>
</ul></li>
<li>Zuul</li>
</ul>

<h2 id="toc_2">Ribbon主要能力</h2>

<ul>
<li>服务发现，根据服务名字，找出所有同名实例</li>
<li>服务选择规则，依据规则策略，从多个服务中选择有效的服务</li>
<li>服务监听，检测无效的服务，高效去除</li>
</ul>

<h2 id="toc_3">REST Template用法</h2>

<ol>
<li>直接使用RestTemplate，url写死</li>
<li>用LoadBalancerClient通过应用名称获取url，然后再使用RestTemplate</li>
<li>用@LoadBalanced，可在restTemplate里使用应用名字</li>
</ol>

<h2 id="toc_4">Ribbon主要组件</h2>

<ul>
<li>ServerList，获取所有的可用服务</li>
<li>ServerListFilter：过滤到一部分地址</li>
<li><p>IRule：选择一个实例</p>

<ul>
<li>在application.yml里配置选择策略，如：选择随机策略</li>
</ul>

<pre><code>ORDER:
    ribbon:
        NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule
</code></pre></li>
</ul>

<h2 id="toc_5">Feign使用方法</h2>

<p>1.增加包依赖</p>

<pre><code>        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt;
        &lt;/dependency&gt;
</code></pre>

<p>2.启动类增加<code>@EnableFeignClients</code>注解<br/>
3.新建Client Interface，增加<code>@FeignClient(name = &quot;服务名&quot;)</code>注解<br/>
4.在方法前增加<code>@GetMapping(&quot;/方法名&quot;)</code>注解，明确被调用的方法，这个注解跟被调用端的ServerController的方法有对应关系，要注意是完整路径对应，不要遗漏被调用类里<code>@RequestMapping</code>定义的路径</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Cloud学习笔记-3.微服务设计]]></title>
    <link href="http://www.krynn.cn/15309599028203.html"/>
    <updated>2018-07-07T18:38:22+08:00</updated>
    <id>http://www.krynn.cn/15309599028203.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">什么样的系统适合使用微服务</h2>

<ul>
<li>系统中不包含太多强事务场景的，主要是分布式系统主要考虑最终一致性，不适合强事务场景</li>
<li>业务会持续变化，快速迭代</li>
<li>访问压力大，可用性要求高</li>
<li>...</li>
</ul>

<h2 id="toc_1">理论基础-康威定律</h2>

<ul>
<li>Organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations.</li>
<li>任何组织在设计一套系统（广义概念上的系统）时，所交付的设计方案在结构上都与该组织的沟通结构保持一致。</li>
<li>沟通的问题会影响系统的设计，微服务架构也是在解决沟通问题</li>
</ul>

<h2 id="toc_2">微服务特点</h2>

<ul>
<li>一系统微小的服务共同组成</li>
<li>单独部署，跑在自己的进程里</li>
<li>每个服务为独立的业务开发</li>
<li>分布式的管理</li>
</ul>

<h2 id="toc_3">服务拆分考量因素</h2>

<ul>
<li>代码规模</li>
<li>业务迭代情况</li>
<li>技术栈当前的团队能力是否适合独立成军</li>
<li>水平复制扩展，提高容量</li>
<li>数据分区，每个服务负责一个数据子集</li>
<li>功能解耦，单一职责，松耦合，高内聚</li>
<li>关注点分离，界线上下文（DDD），按职责、通用性、粒度等维度分离</li>
<li>微服务粒度和规模并不好把握，是随业务变化而变化的</li>
<li>无状态</li>
</ul>

<h2 id="toc_4">服务拆分方法</h2>

<ul>
<li>每个微服务都有单独的数据存储</li>
<li>根据服务特点选择不同结构的数据库类型</li>
<li>针对边界设计API</li>
<li>依据边界权衡数据冗余</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Cloud学习笔记-2.Eureka]]></title>
    <link href="http://www.krynn.cn/15309573607293.html"/>
    <updated>2018-07-07T17:56:00+08:00</updated>
    <id>http://www.krynn.cn/15309573607293.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Eureka Server 注册中心</h2>

<ul>
<li>EurekaApplication.java需要加入注解<code>@EnableEurekaServer</code></li>
<li><p>配置application.yml</p>

<pre><code>    eureka:
        client:
            service-url:
            defaultZone: http://localhost:8761/eureka
            register-with-eureka: false //关闭自己做为客户端注册
        server:
            enable-self-preservation: false //关闭客户端检测保护
    spring:
        application:
            name: eureka
    server:
        port: 8761
    ```
</code></pre></li>
</ul>

<ul>
<li><p>将eureka放入后台运行</p>

<pre><code>```
//在命令行打包
$ mvn clean package
//放入后台执行
$ nohup java -jar target/eureka-0.0.1-SNAPSHOT.jar &gt; /dev/null 2&gt;&amp;1 &amp;
```
</code></pre></li>
</ul>

<h2 id="toc_1">Eureka Client 进行服务注册</h2>

<ul>
<li><p>引入依赖，靠idea不靠谱，2.0.0正式版以上，会漏了最后一个，让我调测半天</p>

<pre><code>    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;
</code></pre></li>
<li><p>application.yml里配上注册中心地址</p>

<pre><code>eureka:
    client:
        serviceUrl:
        defaultZone: http://127.0.0.1:8761/eureka/
  instance:
    hostname: clientName //设置注册记录里的Status列里的链接地址
spring:
    application:
        name: customer-service
</code></pre></li>
<li><p>在启动的主类加<code>@EnableDiscoveryClient</code>注解</p></li>
</ul>

<h2 id="toc_2">多Eureka集群的配置</h2>

<ul>
<li>生态环境3台起步为佳</li>
<li>Eureka Server端配置

<ul>
<li>多个Server各自配置VM启动参数<code>-Dserver.port=xxxx</code></li>
<li>各Server的application.yml文件中，<code>eureka.client.serverUrl.defaultZone</code>参数配置为其它Server的注册地址，超过两个Server以上Eureka集群时，配置两个地址，用逗号分隔。很多Server的集群中，这两个地址的策略可以定为两两组合，每个Server实例配置的地址互相错开，不用完全一样</li>
</ul></li>
<li>Eureka Client端的配置

<ul>
<li>application.yml文件中，配置<code>eureka.client.serverUrl.defaultZone</code>参数配置为多个Server注册地址，中间用逗号分隔</li>
</ul></li>
</ul>

<h2 id="toc_3">异构系统注册</h2>

<ul>
<li>Eureka提供REST服务调用方式</li>
<li>其它语言只需求根据REST API实现自己的客户端即可

<ul>
<li>Node.js有Eureka-js-client</li>
</ul></li>
<li>如果不会写客户端，也可以引入服务端注册的方式，设置服务获取代理，如:Nginx、ZooKepper等</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac常用命令]]></title>
    <link href="http://www.krynn.cn/15307181630698.html"/>
    <updated>2018-07-04T23:29:23+08:00</updated>
    <id>http://www.krynn.cn/15307181630698.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">查找端口占用</h2>

<pre><code>$ lsof -i:8080 //查询该端口8080的进程id
$ kill 12345   //杀掉该id进程
</code></pre>

<h2 id="toc_1">查看进程状态</h2>

<pre><code>$ ps -ef | grep eureka
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drools简介]]></title>
    <link href="http://www.krynn.cn/15301972643935.html"/>
    <updated>2018-06-28T22:47:44+08:00</updated>
    <id>http://www.krynn.cn/15301972643935.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Drools组成部分</h2>

<ul>
<li>Drools规则文件，drl</li>
<li>解释执行规则，API

<ul>
<li>规则编译</li>
<li>规则收集</li>
<li>规则执行</li>
</ul></li>
</ul>

<h2 id="toc_1">主要概念</h2>

<h3 id="toc_2">kmodule.xml</h3>

<ul>
<li>文件存储路径如果不指定，KieModuleModelImpl代码里默认会常量固定的为META-INF目录</li>
<li>kmodule中可以定义多个kbase，分别对应不同drl规则文件</li>
<li>kbase需要唯一命名，名称字符内容不限</li>
<li>package为drl文件所在resource目录下的路径，drl文件中的package与实际路径不一定相同，默认情况下会扫描resources目录下所有规则文件</li>
<li>kbase用default属性来定义默认kbase，默认kbase不用名称也可以查找，只能定义一个default，不建议使用，还是用名称为主</li>
<li>kbase下面可以有多个ksession，名称必填，且唯一</li>
</ul>

<h3 id="toc_3">Kie</h3>

<ul>
<li>KIE=knowledge is everything</li>
<li>KIE包括Drools、OptaPlanner、UberFire、jBPM四个项目，KIE本身是四个项目公共的一些接口定义，具体实现在各项目中</li>
<li>KIE的生命周期：

<ul>
<li>编写：编写规则文件，如：drl、bpmn2、决策表、实体类等</li>
<li>构建：变成一个可发布部署的文件，通常是jar</li>
<li>测试、部署</li>
<li>使用：通过KieContainer对jar进行解析创建KieSession</li>
<li>执行：KieSession的API与Drools引擎进行交互，执行规则</li>
<li>交互：根据业务需要提供命令行或者UI交互</li>
<li>管理：管理KieSession或KieContainer</li>
</ul></li>
</ul>

<h3 id="toc_4">FACT对象</h3>

<ul>
<li>是一个特殊的JavaBean，有getter/setter方法</li>
<li>放置于工作内存中</li>
<li>是应用数据和规则间的桥梁</li>
<li>按引用传递</li>
<li>facthandler可用于处理fact对象</li>
</ul>

<h3 id="toc_5">主要API</h3>

<ul>
<li>KieService：工厂方法，用来获取各种对象来完成规则构建、管理和执行，如：KieContainer，用来访问KBase和KSession；KieRepository，用来管理KieModule</li>
<li>KieContainer：KieBase容器，提供获取KieBase的方法，内部通过KieBase来创建KieSession</li>
<li>KieBase：知识仓库，包括了规则、流程和方法。不包含运行时数据，与运行时数据交互，要使用KieSession</li>
<li>KieSession：是一个会话，用来跟Drools引擎交互</li>
<li>KieRepository：单例对象，存放由kmodule.xml文件定义的KieModule的仓库</li>
<li>KieProject：KieContainer通过KieProject来初始化、构造KieModule，并将KieModule存放到KieRepository中，然后KieContainer可以通过KieProject来查询KieModule定义的信息，并根据这些信息构造KieBase和KieSession</li>
<li>ClasspathKieProject：实现了KieProject接口，提供了基于类路径的META-INF/kmodule.xml文件构造KieModule的能力，是基于Maven构造Drools组件的基本方法</li>
</ul>

<h3 id="toc_6">session</h3>

<ul>
<li>有状态session。默认有状态session。没有调用dispose方法前，维持会议状态，可以进行多次操作</li>
<li>无状态session。不用调用dispost进行Session的关闭。它不用fireallrules方法。只用excute方法进行执行。每次交互不保持状态。本质上是对有状态session的封装，每次调用后，方法内都会dispose。用在单次操作场景，如校验</li>
</ul>

<h3 id="toc_7">规则文件</h3>

<ul>
<li>.drl文件，文本文件，存放用户自定义函数、数据对象及自定义查询等</li>
<li>Drools编译器对此文件进行编译</li>
<li>package：必须放在第一行，不要求跟目录层级一致</li>
<li>import：跟java语法一样，区别在可以引入静态方法import static xxxx或import function xxxx</li>
<li>global：定义全局的服务，如：global xxx.xxx.Xxx xxx，后面就可以直接使用xxx</li>
<li>function：定义方法，function String xxx() {}，后续可以直接使用该方法</li>
<li>queries：类似function</li>
<li>rules：定义具体的规则。包括：agenda-group（属性）,when（条件，为true时执行后续，每个条件是and关系）, then（执行）, end等。规则也可以继承</li>
<li>idea自带drools插件JBoss Drools Support</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Cloud学习笔记-1.背景概述]]></title>
    <link href="http://www.krynn.cn/15301075535592.html"/>
    <updated>2018-06-27T21:52:33+08:00</updated>
    <id>http://www.krynn.cn/15301075535592.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">微服务是什么</h2>

<ul>
<li>James Lewis &amp; Martin Fowler 2014年3月25日写的《Microservices》</li>
<li><a href="http://martinfowler.com/articles/microservices.html">http://martinfowler.com/articles/microservices.html</a></li>
<li>微服务是一种架构风格，没有强制性，没有标准答案，如同Restful</li>
<li>微服务特点：

<ul>
<li>一系列微小的服务组成</li>
<li>一个微服务一个进程</li>
<li>每个服务提供独立的业务功能</li>
<li>独立部署</li>
<li>分布式</li>
<li>无状态</li>
<li>被管理</li>
<li>自动运维</li>
<li>API/Restful</li>
</ul></li>
</ul>

<h2 id="toc_1">单体架构优点和缺点</h2>

<ul>
<li>优点：容易测试和部署</li>
<li>缺点：代码维护困难，发布依赖多，构建时间长，稳定性易受单个模块影响，扩展性不够，开发效率低</li>
<li>其实微服务跟单体架构比没什么意思，毕竟不是一个时代的模式。分布式跟微服务才比较困扰</li>
</ul>

<h2 id="toc_2">分布式架构的优点和缺点</h2>

<ul>
<li>优点：分布式，多个自治的处理单元，不共享主内存，通过网络发送消息合作</li>
<li>缺点：没有牵引微小化，部分模块仍然较大，存在单体架构的各种缺点</li>
</ul>

<h2 id="toc_3">微服务架构的主要组件</h2>

<ul>
<li>服务注册发现，Zookeeper，Eureka</li>
<li>服务网关，连接内外，提供服务路由，屏蔽后台细节，还会提供限流和容错，监控和日志也可以在这做，用户认证、授权，反爬虫</li>
<li>前端服务，边缘服务，对后端的服务进行聚合和裁剪

<ul>
<li>聚合：多个API逻辑进行聚合，减少后端请求数</li>
<li>裁剪：根据用户环境，返回不一样的服务内容，比如：手机端跟PC端返回不一样的内容</li>
</ul></li>
<li>后端服务，提供业务功能</li>
</ul>

<h2 id="toc_4">Spring Cloud是什么</h2>

<ul>
<li>是一个开发工具集，包括了多个子项目</li>
<li>Spring Boot提供开发便利性</li>
<li>对Netflix开源组件进行封装</li>
<li>降低了分布式开发门槛</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[蓝鲸智云-CMDB源码解读1-架构篇]]></title>
    <link href="http://www.krynn.cn/15292476343143.html"/>
    <updated>2018-06-17T23:00:34+08:00</updated>
    <id>http://www.krynn.cn/15292476343143.html</id>
    <content type="html"><![CDATA[
<p>蓝鲸是腾讯游戏运维部门开发出来的一个IT运维平台，主要围绕应用运维工作，提供一系列的工具。具体包括：作业平台、集成平台、管控平台、数据平台、配置平台等。这次要分析的是里面最基础的配置平台，它主要负责运维环境里所有CI、以及CI的关系管理，并为其它平台提供统一的资源视图。</p>

<p>蓝鲸配置平台，即CMDB，是蓝鲸系列产品中第一个开源产品。当前版本是3.0，基于golang语言全新重构，完全基于微服务架构风格开发，小小好奇心驱动去看看。</p>

<ol>
<li><p>首先看一眼蓝鲸CMDB的官方逻辑架构图<br/>
<img src="http://oukyvrh16.bkt.clouddn.com/15292479035199.png" alt=""/></p></li>
</ol>

<ul>
<li>典型的前后台分层，业务逻辑与原子服务解耦的分层设计。</li>
<li>最上面展现层，基于gin和vue.js实现web服务。</li>
<li>前后台中间设置api层，目前主流的前后台交互通过专用apiserver进行业务逻辑的包装和转发方式，k8s，promuthues等都是这样。前台只负责页面渲染、数据呈现和人机交互。后台服务层负责业务逻辑处理和数据持久化。</li>
<li>然后是服务层，里面又分成业务场景层和资源管理层。

<ul>
<li>顾名思义，业务场景层是与资源管理相关场景所需的功能域，如拓扑呈现。拓扑呈现需要根据资源模型和关系定义，维护CI间的关系路径，这里面包含了大量的业务逻辑，如依赖关系校验、承载规则等等，跟业务强相关的东西。随着业务的深入，变化会比较大，属于扩展性要求高的一层，剥离出来单独分层比较好。目前已提取的场景包括：管理、事件、进程、主机、拓扑、数据采集等几个服务；</li>
<li>下面是资源管理层，这层的功能相对比较稳定，属于原子性的功能和模型，受业务影响小，以稳定性、性能、可靠性等为主要考量。主要把管理对象抽象成主机、进程和通用对象三类，这种抽象方法IT针对性太强，做一些行业应用需要自己扩展，另外还有一个审计服务。</li>
</ul></li>
<li><p>最下层为存储层，主要是MongoDB主数据库、Redis缓存，以及用ZooKeeper来做服务注册发现以及服务配置管理。</p></li>
</ul>

<ol>
<li>再看看实现架构/代码工程
下次再写</li>
</ol>

]]></content>
  </entry>
  
</feed>
